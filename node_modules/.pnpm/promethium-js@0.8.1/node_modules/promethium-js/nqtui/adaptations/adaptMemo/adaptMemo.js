import sendSignal from "./sendSignal";
import get from "../get";
import setInitialParameters from "../setInitialParameters";
import setCleanupSet from "../setCleanupSet";
import { updateValueAndSendFreshNotifications } from "./updateValueAndSendFreshNotifications";
export default function adaptMemo(fn) {
    const memo = {
        //state properties
        syncSubscriptions: {
            one: new Set(),
            two: new Set(),
        },
        memoSubscriptions: {
            one: new Set(),
            two: new Set(),
        },
        asyncAndRenderSubscriptions: new Set(),
        activeSubscriptions: "one",
        value: undefined,
        //effect properties
        firstRun: true,
        type: "memo",
        childCount: 0,
        position: null,
        level: null,
        cleanupTree: null,
        cleanupTreeNodePointer: null,
        observableSubscriptionSets: new Set(),
        staleStateValuesCount: 0,
        falseAlarmSignalsCount: 0,
        sendSignal: (signal) => sendSignal(memo, fn, signal),
    };
    setInitialParameters(memo);
    setCleanupSet(memo);
    let freshMemoRun = true;
    return () => {
        if (freshMemoRun === true) {
            updateValueAndSendFreshNotifications(memo, fn);
            freshMemoRun = false;
        }
        return get(memo);
    };
}
